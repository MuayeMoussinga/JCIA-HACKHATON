import streamlit as st 
from PIL import Image
import cv2
import numpy as np
from ultralytics import YOLO
import os


#pipeline avant d"etre pass√© au mod√®le
def pipeline(img):
    #Convertir PIL ‚Üí OpenCV (BGR)
    opencv_image = cv2.cvtColor(np.array(img), cv2.COLOR_RGB2BGR)
    #Charger le mod√®le YOLO
    model = YOLO("best.pt")
    #Faire la pr√©diction
    results = model(opencv_image)
    result = results[0]
    boxes = result.boxes
    names = model.names
    #Dessiner les d√©tections : classe, id, score
    for box in boxes:
        x1, y1, x2, y2 = map(int, box.xyxy[0])
        conf = float(box.conf[0])
        cls_id = int(box.cls[0])
        label = f"{names[cls_id]} (ID:{cls_id}) {conf:.2f}"

        cv2.rectangle(opencv_image, (x1, y1), (x2, y2), (0, 255, 0), 2)
        cv2.putText(opencv_image, label, (0, 50), cv2.FONT_HERSHEY_SIMPLEX,
                    0.5, (0, 255, 0), 2)
    #Enregistrer l'image annot√©e
    os.makedirs("resultats", exist_ok=True)
    output_path = "resultats/image_annotee.jpg"
    cv2.imwrite(output_path, opencv_image)

    return names[cls_id]





#fonction main
def main():
    #application d'un style sur le logo agria
    st.markdown("""
    <style>
    [data-testid=stSidebar] [data-testid=stImage] {
        width: 100%; 
        margin-left: 0; 
        margin-right: 0; 
    }
    </style>
    """, unsafe_allow_html=True)
    #affichage du logo
    with st.sidebar:
        st.image("agria.png")
    
    #Titre de la page
    st.title("\U0001F680"+"Application web intelligente"+"\U0001F9E0"+" pour la classification de prunes")
    #Ajout de texte dans la side bar
    st.sidebar.write("**Hello**"+ "\U0001F60A" +" "+ "\U0001F44B")
    st.sidebar.markdown(
        "*Cette application est destin√©e √† la classification de prunes en 6 cat√©gories.Vous pouvez uploader une image  pour d√©terminer la classe de cette derni√®re.*\n\n"
        "**Sommaire**\n\n"
        "1. Contexte\n\n"
        "2. Mod√®le Yolov8\n\n"
        "3. Methodologie\n\n"
        "4. M√©trique de performance\n\n"
        "5. Architecture de la solution\n\n"
        "6. D√©monstration de mod√®le\n\n"
        
    )

    #Ajout de la couverture sur la page principale
    image = Image.open("couverture.jpg")
    # Redimensionner l'image (largeur, hauteur)
    image_resized = image.resize((700, 100))  # Largeur = 600px, Hauteur = 300px
    # Afficher l'image redimensionn√©e
    st.image(image_resized)
    
    #Ajout du contenu de la page
    st.subheader("1. Contexte")
    st.write("Le projet de tri automatique des prunes est lanc√© √† l'occasion de **la journ√©e Internationale de l'intelligence Artificielle**.\n\nIl traite le probl√®me de l'automatisation du tri des prunes en fonction de leur √©tat de qualit√©, afin de faciliter leur s√©lection et leur commercialisation. Actuellement, le tri des prunes repose souvent sur une inspection manuelle, ce qui peut √™tre lent, sujet √† des erreurs humaines et co√ªteux en main-d'≈ìuvre. L'objectif du projet est donc de concevoir un mod√®le d'intelligence artificielle capable d'analyser des images de prunes et de les classer automatiquement en six cat√©gories :\n\n")
    st.write("""
            - **Bonne qualit√©** : Prunes parfaitement m√ªres et sans d√©faut.
            - **Non m√ªre** : Prunes qui n‚Äôont pas encore atteint leur pleine maturation.
            - **Tachet√©e** : Prunes pr√©sentant des taches sur leur peau.
            - **Fissur√©e** : Prunes ayant des fissures visibles.
            - **Meurtrie** : Prunes pr√©sentant des signes de dommage mais encore consommables.
            - **Pourrie** : Prunes en √©tat de d√©composition et impropres √† la consommation.
            """)

    st.subheader("2. Mod√®le Yolov8")
    st.write("**Yolov8** a √©t√© notre choix pour la r√©alisation de ce projet car il est r√©put√© pour :\n\n")
    st.write("""
            - **Efficacit√© et Rapidit√©** : YOLOv5 est connu pour sa rapidit√© dans la d√©tection d‚Äôobjets. Il traite les images en une seule passe, ce qui le rend extr√™mement efficace pour des applications en temps r√©el.
            - **Pr√©cision Optimis√©e** : Gr√¢ce √† ses architectures am√©lior√©es et √† ses mod√®les pr√©-entra√Æn√©s, YOLOv5 offre une tr√®s bonne pr√©cision de d√©tection et de classification des objets.
            - **Facilit√© d‚ÄôUtilisation** : YOLOv5 est construit sur PyTorch, ce qui le rend relativement simple √† utiliser et √† entra√Æner avec un jeu de donn√©es comme African Plums Dataset sur Kaggle.
             """)
    st.subheader("3. Methodologie")
    st.write("Pour r√©aliser cette application nous avons d√©coup√© le projet en deux parties :\n\n")
    st.write("""
            - **Front-end** : Streamlit
            - **Back-end** : Yolov8\n\n
            """
            " L'entrainement de notre mod√®le Yolov8 a √©t√© d√©coup√© en plusieurs √©tapes :\n\n")
    st.write("""
            - Nettoyage des donn√©es
            - Redimensionnement des images
            - Correction des fichiers d'images
            - Labelisation des images avec Makesense.ia
            - Entrainement du mod√®le sur Google Colab avec des images de Africa Plums
            - Exportation du mod√®le en fichier pt
             """)
    st.subheader("4. M√©trique de perfomance")
    st.write("Apr√®s entrainement du mod√®le sur collab , voici les diff√©rnetes remarques sur son entrainement et ses perfomances : ")
    #Ajout des photos sur la page
    st.write("***1-Perfomance du mod√®le par classe***")
    image2 = Image.open("Model_summary/Tableau.PNG")
    st.image(image2)
    st.write("***2-Matrixe de confusion normalis√©e du mod√®le***")
    image3 = Image.open("Model_summary/confusion_matrix_normalized.png")
    st.image(image3)
    ##############################
    st.subheader("5. Architecture de la solution")
    st.write("**Architecture G√©n√©rale**\n\n")
    st.write("""
             1. **Interface Utilisateur**: Conception de l'interface avec **Streamlit**, permettant aux utilisateurs d'importer des images , visualiser les r√©sultats,chargement dynamique des donn√©es et r√©sultats pr√©dits par **le mod√®le YOLO**.
             2. **Mod√®le de D√©tection** : Int√©gration du mod√®le YOLO pour la d√©tection d'objets entrain√© sur le dataset Africa Plums.**Pipeline de traitement d'images(Redimensionnement-d√©tection d'objets-retour des r√©sultats au front-end)**
             """)
    st.subheader("6. Demonstration de Mod√®le")
    ##chargement du mod√®le
    #prune_classify = 
    ##################
    st.write("***Appuyer sur le bouton pour uploader l'image***")
    uploaded_file = st.file_uploader("Choisissez une image...", type=["jpg", "png", "jpeg"])
    img_title=st.text_input(label="Ajouter un titre √† l'image")
    if uploaded_file is not None:
        image = Image.open(uploaded_file)
        st.image(image, caption=img_title, use_container_width=True)
        #ajout du style au button
        st.markdown("""
                <style>
                div.stButton > button {
                    background-color: #4CAF50; /* Vert */
                    color: white;
                    border-radius: 10px;
                    padding: 10px 20px;
                    font-size: 16px;
                }
                </style>
            """, unsafe_allow_html=True)
        st.markdown("""
            <style>
            div.stButton > button:hover {
                color: black !important;
            }
            </style>
        """, unsafe_allow_html=True)
        #si on clique sur le button
        if (st.button("Cliquer pour d√©terminer la cat√©gorie de cette prune")):
            #pipeline de traitement de l'image et pr√©diction
            classe=pipeline(image)
            #Recharger l'image avec Pillow et l'afficher
            final_img = cv2.imread("resultats/image_annotee.jpg")
            final_img = cv2.cvtColor(final_img, cv2.COLOR_BGR2RGB)
            final_img = Image.fromarray(final_img)
            st.write("Classification de la prune")
            st.image(final_img, use_container_width=True)
            st.markdown("**Cette prune est de la cat√©gorie: " + classe + " üòä**")
            
            
    else:
        st.write("Erreur lors du chargement de l'image")

if __name__=='__main__':
    main()